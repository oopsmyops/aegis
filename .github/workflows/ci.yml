name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install Kyverno CLI
      uses: kyverno/action-install-cli@v0.2.0
      with:
        release: 'v1.15.0'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,build,dist
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=venv,build,dist

    - name: Check code formatting with black
      run: |
        black --check --diff . --exclude="/(venv|build|dist)/"

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail CI on type errors for now

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing --ignore=venv

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install security scanning tools with fallback options
        pip install bandit
        # Try to install safety with compatible versions, fallback to pip-audit
        pip install "safety>=3.0.0" "typer>=0.9.0" || pip install pip-audit

    - name: Run safety check
      run: |
        # Try to run safety check with fallback handling
        echo "Running security vulnerability scan..."
        
        # Try safety first
        if command -v safety >/dev/null 2>&1 && safety check --json --output safety-report.json 2>/dev/null; then
          echo "✅ Safety check completed successfully"
          safety check
        elif command -v pip-audit >/dev/null 2>&1; then
          echo "⚠️ Safety failed, using pip-audit as fallback..."
          pip-audit --format=json --output=safety-report.json || echo '{"vulnerabilities": []}' > safety-report.json
          pip-audit
        else
          echo "⚠️ No security scanner available, creating empty report"
          echo '{"vulnerabilities": [], "errors": ["No security scanner available"]}' > safety-report.json
        fi

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json --exclude ./venv,./build,./dist || echo "Bandit JSON report failed, but continuing..."
        bandit -r . -ll --exclude ./venv,./build,./dist || echo "Bandit scan failed, but continuing..."

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydocstyle

    - name: Check docstring coverage
      run: |
        pydocstyle . --count --explain --source || true

    - name: Validate README
      run: |
        # Check if README exists and has basic sections
        if [ ! -f "README.md" ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        
        # Check for required sections
        required_sections=("Installation" "Usage" "Features")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "⚠️ README.md missing section: $section"
          else
            echo "✅ README.md has section: $section"
          fi
        done